# Configuration for OverlapNet (includes training and validation)

# ----------------------------------------------
# Experiment definition
#

# Path where all experiments are stored. Data of current experiment
# will be in experiments_path/testname
experiments_path: "tmp/"

# String which defines experiment
testname: "experiment_test1"

# weights from older training. Not used if empty
pretrained_weightsfilename: "data/model_geo.weight"

# What input to use ?
# Be aware that the networks will have different number of weights, thus
# a model trained with only depth cannot be used together with normals
use_depth: True                    # default: True if parameter not there
use_normals: True                  # default: True if parameter not there
use_class_probabilities: False     # default: False if parameter not there
use_class_probabilities_pca: False # default: False if parameter not there.
use_intensity: False               # default: False if parameter not there

# ----------------------------------------------
# Train and test data
#
# the folder of dataset
data_root_folder: "data/"

# use multiple seqs for training, for testing phase please disable it
training_seqs: "07"   

# use multiple seqs for testing, for training phase please disable it
testing_seqs: "07"

# seq label for inferring
infer_seqs: "07"

batch_size :  16
# No of batches per epoch, thus the actual used train data is 
# batch_size*no_batches_in_epoch. 
# If bigger than train/test data, all train/test data will be used.
no_batches_in_epoch : 100000000000
no_epochs :  100
# No of samples for validation. If bigger than testdata, all testdata is used.
no_test_pairs :  10000



# ----------------------------------------------
# Training parameters
#
learning_rate: 0.001
momentum: 0.5
learning_rate_decay: 1.0e-06



# ----------------------------------------------
# Model definition
#
model:

  # size of one input image, thus input size of one leg of siamese network (heightxwidth)
  # no_channels are defined due to used inputs channels above.
  input_shape: [64,900]

  # leg output width
  leg_output_width: 360

  # architecture for leg conv layers
  # parameters are passed directly to Conv2D()
  leg_architecture:
    - {filters: 16, kernel_size: [5,15], strides: [2,2]}
    - {filters: 32, kernel_size: [3,15], strides: [2,1]}
    - {filters: 64, kernel_size: [3,15], strides: [2,1]}
    - {filters: 64, kernel_size: [3,12], strides: [2,1], name: 's_conv3a'}
    - {filters: 128, kernel_size: [2,9], strides: [2,1]}
    - {filters: 128, kernel_size: [1,9], strides: [1,1]}
    - {filters: 128, kernel_size: [1,9], strides: [1,1]}
    - {filters: 128, kernel_size: [1,9], strides: [1,1]}
    - {filters: 128, kernel_size: [1,7], strides: [1,1]}
    - {filters: 128, kernel_size: [1,5], strides: [1,1]}
    - {filters: 128, kernel_size: [1,3], strides: [1,1]}

  # architecture for head conv layers
  # parameters are passed directly to Conv2D()
  head_architecture:
    - {filters: 64, kernel_size: [1,15], strides: [1,15], activation: 'linear'}
    - {filters: 128, kernel_size: [15,1], strides: [15,1]}
    - {filters: 256, kernel_size: [3,3]}
  
# ----------------------------------------------
# Special settings for validation
#
show_plots: True

